/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow strict-local
 */

import * as React from 'react';
import { act, render } from '@testing-library/react';
import { createEventTarget } from 'dom-event-testing-library';
import useEvent from '..';
describe('use-event', () => {
  describe('setListener()', () => {
    test('event dispatched on target', () => {
      const listener = jest.fn();
      const targetRef = React.createRef();
      declare function Component(): any;
      render(<Component />);
      const target = createEventTarget(targetRef.current);
      act(() => {
        target.click();
      });
      expect(listener).toBeCalledTimes(1);
    });
    test('event dispatched on parent', () => {
      const listener = jest.fn();
      const listenerCapture = jest.fn();
      const targetRef = React.createRef();
      const parentRef = React.createRef();
      declare function Component(): any;
      render(<Component />);
      const parent = createEventTarget(parentRef.current);
      act(() => {
        parent.click();
      });
      expect(listener).toBeCalledTimes(0);
      expect(listenerCapture).toBeCalledTimes(0);
    });
    test('event dispatched on child', () => {
      const log = [];
      const listener = jest.fn(() => {
        log.push('bubble');
      });
      const listenerCapture = jest.fn(() => {
        log.push('capture');
      });
      const targetRef = React.createRef();
      const childRef = React.createRef();
      declare function Component(): any;
      render(<Component />);
      const child = createEventTarget(childRef.current);
      act(() => {
        child.click();
      });
      expect(listenerCapture).toBeCalledTimes(1);
      expect(listener).toBeCalledTimes(1);
      expect(log).toEqual(['capture', 'bubble']);
    });
    test('event dispatched on text node', () => {
      const listener = jest.fn();
      const targetRef = React.createRef();
      const childRef = React.createRef();
      declare function Component(): any;
      render(<Component />);
      const text = createEventTarget(childRef.current.firstChild);
      act(() => {
        text.click();
      });
      expect(listener).toBeCalledTimes(1);
    });
    test('listener can be attached to document ', () => {
      const listener = jest.fn();
      const targetRef = React.createRef();
      declare function Component(arg0: any): any;
      render(<Component target={document} />);
      const target = createEventTarget(targetRef.current);
      act(() => {
        target.click();
      });
      expect(listener).toBeCalledTimes(1);
    });
    test('listener can be attached to window ', () => {
      const listener = jest.fn();
      const targetRef = React.createRef();
      declare function Component(arg0: any): any;
      render(<Component target={window} />);
      const target = createEventTarget(targetRef.current);
      act(() => {
        target.click();
      });
      expect(listener).toBeCalledTimes(1);
    });
    test('listener is replaceable', () => {
      const listener = jest.fn();
      const listenerAlt = jest.fn();
      const targetRef = React.createRef();
      declare function Component(arg0: any): any;
      const {
        rerender
      } = render(<Component onClick={listener} />);
      const target = createEventTarget(targetRef.current);
      act(() => {
        target.click();
      });
      expect(listener).toBeCalledTimes(1);
      rerender(<Component onClick={listenerAlt} />);
      act(() => {
        target.click();
      });
      expect(listener).toBeCalledTimes(1);
      expect(listenerAlt).toBeCalledTimes(1);
    });
    test('listener is removed when value is null', () => {
      const listener = jest.fn();
      const targetRef = React.createRef();
      declare function Component(arg0: any): any;
      const {
        unmount
      } = render(<Component off={false} />);
      const target = createEventTarget(targetRef.current);
      act(() => {
        target.click();
      });
      expect(listener).toBeCalledTimes(1);

      // this should unset the listener
      unmount();
      listener.mockClear();
      act(() => {
        target.click();
      });
      expect(listener).toBeCalledTimes(0);
    });
    test('custom event dispatched on target', () => {
      const listener = jest.fn();
      const targetRef = React.createRef();
      declare function Component(): any;
      render(<Component />);
      act(() => {
        const event = new CustomEvent('magic-event', {
          bubbles: true
        });
        targetRef.current.dispatchEvent(event);
      });
      expect(listener).toBeCalledTimes(1);
    });
    test('listeners can be set on multiple targets simultaneously', () => {
      const log = [];
      const targetRef = React.createRef();
      const parentRef = React.createRef();
      const childRef = React.createRef();
      const listener = jest.fn(e => {
        log.push(['bubble', e.currentTarget.id]);
      });
      const listenerCapture = jest.fn(e => {
        log.push(['capture', e.currentTarget.id]);
      });
      declare function Component(): any;
      render(<Component />);
      const child = createEventTarget(childRef.current);
      act(() => {
        child.click();
      });
      expect(listenerCapture).toBeCalledTimes(2);
      expect(listener).toBeCalledTimes(2);
      expect(log).toEqual([['capture', 'parent'], ['capture', 'target'], ['bubble', 'target'], ['bubble', 'parent']]);
    });
    test('listeners are specific to each event handle', () => {
      const log = [];
      const targetRef = React.createRef();
      const childRef = React.createRef();
      const listener = jest.fn(e => {
        log.push(['bubble', 'target']);
      });
      const listenerAlt = jest.fn(e => {
        log.push(['bubble', 'target-alt']);
      });
      const listenerCapture = jest.fn(e => {
        log.push(['capture', 'target']);
      });
      const listenerCaptureAlt = jest.fn(e => {
        log.push(['capture', 'target-alt']);
      });
      declare function Component(): any;
      render(<Component />);
      const child = createEventTarget(childRef.current);
      act(() => {
        child.click();
      });
      expect(listenerCapture).toBeCalledTimes(1);
      expect(listenerCaptureAlt).toBeCalledTimes(1);
      expect(listener).toBeCalledTimes(1);
      expect(listenerAlt).toBeCalledTimes(1);
      expect(log).toEqual([['capture', 'target'], ['capture', 'target-alt'], ['bubble', 'target'], ['bubble', 'target-alt']]);
    });
  });
  describe('cleanup', () => {
    test('removes all listeners for given event type from targets', () => {
      const clickListener = jest.fn();
      declare function Component(): any;
      const {
        unmount
      } = render(<Component />);
      unmount();
      const target = createEventTarget(document);
      act(() => {
        target.click();
      });
      expect(clickListener).toBeCalledTimes(0);
    });
  });
  describe('stopPropagation and stopImmediatePropagation', () => {
    test('stopPropagation works as expected', () => {
      const childListener = jest.fn(e => {
        e.stopPropagation();
      });
      const targetListener = jest.fn();
      const targetRef = React.createRef();
      const childRef = React.createRef();
      declare function Component(): any;
      render(<Component />);
      const child = createEventTarget(childRef.current);
      act(() => {
        child.click();
      });
      expect(childListener).toBeCalledTimes(1);
      expect(targetListener).toBeCalledTimes(0);
    });
    test('stopImmediatePropagation works as expected', () => {
      const firstListener = jest.fn(e => {
        e.stopImmediatePropagation();
      });
      const secondListener = jest.fn();
      const targetRef = React.createRef();
      declare function Component(): any;
      render(<Component />);
      const target = createEventTarget(targetRef.current);
      act(() => {
        target.click();
      });
      expect(firstListener).toBeCalledTimes(1);
      expect(secondListener).toBeCalledTimes(0);
    });
  });
});